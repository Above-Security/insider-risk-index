import PDFDocument from 'pdfkit';
import { AssessmentResult } from "@/lib/zod-schemas";
import { PILLARS, getRiskLevel, RISK_LEVELS } from "@/lib/pillars";
import { formatDate } from "@/lib/utils";

type RiskLevel = typeof RISK_LEVELS[number];

interface OrganizationData {
  organizationName: string;
  industry: string;
  employeeCount: string;
}

interface PDFData {
  organizationData: OrganizationData;
  result: AssessmentResult;
  generatedAt: Date;
}

/**
 * Production-grade PDF generation using PDFKit
 * No Chromium, no memory leaks, serverless-optimized
 */
export async function generatePDFWithPDFKit(
  pdfData: PDFData,
  type: 'board-brief' | 'detailed-plan'
): Promise<{ buffer: Buffer; filename: string }> {
  console.log("ðŸ“„ Generating PDF with PDFKit (production-grade)");

  const { organizationData, result, generatedAt } = pdfData;
  const riskLevel = getRiskLevel(result.totalScore);

  // Create PDF document
  const doc = new PDFDocument({
    size: 'A4',
    margin: 50,
    info: {
      Title: type === 'board-brief' ? 'Insider Risk Assessment - Board Brief' : 'Insider Risk Assessment - Detailed Plan',
      Subject: 'Insider Risk Assessment Report',
      Author: 'Above Security',
      Creator: 'InsiderRisk.io',
      Producer: 'PDFKit'
    }
  });

  // Generate filename
  const orgName = organizationData.organizationName.replace(/[^a-zA-Z0-9]/g, '-');
  const date = generatedAt.toISOString().split("T")[0];
  const filename = type === 'board-brief'
    ? `${orgName}-Board-Brief-${date}.pdf`
    : `${orgName}-Detailed-Plan-${date}.pdf`;

  // Buffer to collect PDF data
  const buffers: Buffer[] = [];
  doc.on('data', (chunk: Buffer) => buffers.push(chunk));

  return new Promise((resolve, reject) => {
    doc.on('end', () => {
      const buffer = Buffer.concat(buffers);
      console.log("âœ… PDFKit PDF generated successfully:", {
        filename,
        size: `${(buffer.length / 1024).toFixed(1)}KB`
      });
      resolve({ buffer, filename });
    });

    doc.on('error', reject);

    try {
      if (type === 'board-brief') {
        generateBoardBrief(doc, pdfData, riskLevel);
      } else {
        generateDetailedPlan(doc, pdfData, riskLevel);
      }

      doc.end();
    } catch (error) {
      reject(error);
    }
  });
}

function generateBoardBrief(doc: PDFKit.PDFDocument, pdfData: PDFData, riskLevel: RiskLevel) {
  const { organizationData, result, generatedAt } = pdfData;

  // Header
  doc.fontSize(24)
     .fillColor('#1a365d')
     .text('Insider Risk Assessment', 50, 50)
     .fontSize(16)
     .fillColor('#2d3748')
     .text('Executive Board Brief', 50, 85);

  // Organization info
  doc.fontSize(12)
     .fillColor('#4a5568')
     .text(`Organization: ${organizationData.organizationName}`, 50, 120)
     .text(`Industry: ${organizationData.industry}`, 50, 135)
     .text(`Date: ${formatDate(generatedAt)}`, 50, 150);

  // Risk Score - Large and prominent
  doc.fontSize(48)
     .fillColor('#e53e3e')
     .text(result.totalScore.toFixed(0), 400, 120);

  doc.fontSize(14)
     .fillColor('#2d3748')
     .text('Insider Risk Index', 400, 175)
     .text(`Level ${result.level}: ${riskLevel.description}`, 400, 195);

  // Key Findings
  doc.fontSize(16)
     .fillColor('#1a365d')
     .text('Key Findings', 50, 240);

  doc.fontSize(11)
     .fillColor('#4a5568');

  let yPos = 265;
  result.pillarBreakdown.forEach((pillar) => {
    const pillarInfo = PILLARS.find(p => p.id === pillar.pillarId);
    if (pillarInfo) {
      doc.text(`â€¢ ${pillarInfo.name}: ${pillar.score}/100`, 70, yPos);
      yPos += 20;
    }
  });

  // Recommendations
  doc.fontSize(16)
     .fillColor('#1a365d')
     .text('Critical Recommendations', 50, yPos + 20);

  yPos += 45;
  doc.fontSize(11)
     .fillColor('#4a5568');

  const topRecommendations = result.recommendations?.slice(0, 3) || [
    "Implement comprehensive monitoring and detection capabilities",
    "Enhance employee training and awareness programs",
    "Strengthen access controls and identity management"
  ];

  topRecommendations.forEach((rec, index) => {
    doc.text(`${index + 1}. ${rec}`, 70, yPos, { width: 450 });
    yPos += 30;
  });

  // Footer
  doc.fontSize(10)
     .fillColor('#718096')
     .text('Generated by Above Security | abovesec.com', 50, 750);
}

function generateDetailedPlan(doc: PDFKit.PDFDocument, pdfData: PDFData, riskLevel: RiskLevel) {
  const { organizationData, result, generatedAt } = pdfData;

  // Title Page
  doc.fontSize(28)
     .fillColor('#1a365d')
     .text('Insider Risk Assessment', 50, 100, { align: 'center' });

  doc.fontSize(20)
     .fillColor('#2d3748')
     .text('Comprehensive Implementation Plan', 50, 150, { align: 'center' });

  doc.fontSize(14)
     .fillColor('#4a5568')
     .text(organizationData.organizationName, 50, 200, { align: 'center' })
     .text(formatDate(generatedAt), 50, 220, { align: 'center' });

  // Executive Summary
  doc.addPage()
     .fontSize(18)
     .fillColor('#1a365d')
     .text('Executive Summary', 50, 50);

  doc.fontSize(12)
     .fillColor('#4a5568')
     .text(`Your organization scored ${result.totalScore}/100 on the Insider Risk Index, placing you at Level ${result.level} (${riskLevel.description}). This report provides a comprehensive roadmap for improving your insider threat posture.`, 50, 85, { width: 500 });

  // Risk Breakdown
  let yPos = 150;
  doc.fontSize(16)
     .fillColor('#1a365d')
     .text('Risk Assessment Breakdown', 50, yPos);

  yPos += 30;
  doc.fontSize(12)
     .fillColor('#2d3748');

  result.pillarBreakdown.forEach((pillar) => {
    const pillarInfo = PILLARS.find(p => p.id === pillar.pillarId);
    if (pillarInfo) {
      doc.text(`${pillarInfo.name}`, 50, yPos)
         .fontSize(11)
         .fillColor('#4a5568')
         .text(`Score: ${pillar.score}/100 | Weight: ${(pillar.weight * 100).toFixed(0)}% | Contribution: ${pillar.contributionToTotal.toFixed(1)}`, 50, yPos + 15)
         .text(pillarInfo.description, 50, yPos + 30, { width: 500 });

      yPos += 80;
      doc.fontSize(12)
         .fillColor('#2d3748');
    }
  });

  // Implementation Roadmap
  doc.addPage()
     .fontSize(18)
     .fillColor('#1a365d')
     .text('90-Day Implementation Roadmap', 50, 50);

  yPos = 85;
  const phases = [
    {
      title: "Phase 1: Foundation (Days 1-30)",
      items: [
        "Conduct comprehensive risk assessment",
        "Establish insider threat program governance",
        "Deploy basic monitoring capabilities",
        "Implement foundational access controls"
      ]
    },
    {
      title: "Phase 2: Detection & Monitoring (Days 31-60)",
      items: [
        "Deploy advanced behavioral analytics",
        "Implement data loss prevention",
        "Establish incident response procedures",
        "Train security operations center staff"
      ]
    },
    {
      title: "Phase 3: Optimization (Days 61-90)",
      items: [
        "Fine-tune detection algorithms",
        "Conduct tabletop exercises",
        "Implement advanced threat hunting",
        "Establish continuous improvement process"
      ]
    }
  ];

  phases.forEach((phase) => {
    doc.fontSize(14)
       .fillColor('#2c5aa0')
       .text(phase.title, 50, yPos);

    yPos += 25;
    doc.fontSize(11)
       .fillColor('#4a5568');

    phase.items.forEach((item) => {
      doc.text(`â€¢ ${item}`, 70, yPos, { width: 450 });
      yPos += 18;
    });

    yPos += 15;
  });

  // Footer
  doc.fontSize(10)
     .fillColor('#718096')
     .text('Generated by Above Security | abovesec.com', 50, 750);
}